@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@inject ViewModels.UserPlaylistViewModel userPlaylistViewModel;

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    public long selectedPlayListId { get; set; }

    private Modal PlaylistDialog { get; set; }

    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    public ClientModels.Playlist PlayList;

    protected override async Task OnInitializedAsync()
    {

        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        var DbContext = await DbFactory.CreateDbContextAsync();

        Artist = DbContext.Artists.SingleOrDefault(a => a.ArtistId == ArtistId);

        Tracks = DbContext.Tracks.Where(a => a.Album.ArtistId == ArtistId)
            .Include(a => a.Album)
            .Select(t => new PlaylistTrack()
                {
                    AlbumTitle = (t.Album == null ? "-" : t.Album.Title),
                    TrackId = t.TrackId,
                    TrackName = t.Name,
                    IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "Favorites")).Any()
                })
            .ToList();


        InitUserPlaylists();
        PlayList = new ClientModels.Playlist { };

    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        await AssignDefaultPlaylist();
        await AddToFaviroute(true, trackId);
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        await AddToFaviroute(false, trackId);
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private void AddTrackToPlaylist()
    {
        var pla = PlayList.Name;

        CreateUserPlaylist(PlayList, SelectedTrack);

        CloseInfoMessage();
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        PlaylistDialog.Close();

        InitUserPlaylists();

        navigationManager.NavigateTo("/", true);
    }

    @inject NavigationManager navigationManager;

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    //private async Task CreateUserPlaylist(ClientModels.Playlist playlist, ClientModels.PlaylistTrack track)
    //{
    //    try
    //    {
    //        var DbContext = await DbFactory.CreateDbContextAsync();

    //        var resTrack = await GetTrack(track.TrackId);
    //        var resTracks = new List<Track>() { };
    //        resTracks.Add(resTrack);
    //        var playList = new Chinook.Models.Playlist { Tracks = resTracks };

    //        if (!string.IsNullOrEmpty(playlist.Name))
    //        {
    //            playList = new Chinook.Models.Playlist
    //                {
    //                    PlaylistId = GenPlayListId(),
    //                    Name = playlist.Name,
    //                };
    //        }
    //        else
    //        {
    //            var resUsrPlay = (await GetUserPlaylists()).Select(x => x.Playlist)
    //            .FirstOrDefault(x => x.PlaylistId == selectedPlayListId);

    //            playList.PlaylistId = resUsrPlay.PlaylistId;
    //            playList.Name = resUsrPlay.Name;
    //            //var resUps = new List<UserPlaylist>() { };
    //            //var resUp = new UserPlaylist { PlaylistId = resUsrPlay.PlaylistId, UserId = CurrentUserId };
    //            //resUps.Add(resUp);
    //            //playList.UserPlaylists = resUps;
    //        }

    //        //var playList = new Chinook.Models.Playlist
    //        //    {
    //        //        PlaylistId = GenPlayListId(),
    //        //        Name = playlist.Name,
    //        //    };



    //        var usrPlayList = new Chinook.Models.UserPlaylist { };
    //        if (!string.IsNullOrEmpty(playlist.Name))
    //        {
    //            usrPlayList = new Chinook.Models.UserPlaylist
    //                {
    //                    Playlist = playList,
    //                    UserId = CurrentUserId,
    //                };
    //        }
    //        else
    //        {
    //            var resUsrPlay = (await GetUserPlaylists()).Select(x => x.Playlist)
    //            .FirstOrDefault(x => x.PlaylistId == selectedPlayListId);

    //            usrPlayList = new Chinook.Models.UserPlaylist
    //                {
    //                    Playlist = playList,
    //                    UserId = CurrentUserId,
    //                    //PlaylistId = resUsrPlay.PlaylistId,
    //                };
    //        }
    //        //var usrPlayList = new Chinook.Models.UserPlaylist
    //        //    {
    //        //        Playlist = playList,
    //        //        UserId = CurrentUserId,
    //        //    };


    //        if (!string.IsNullOrEmpty(playlist.Name))
    //        {
    //            await DbContext.UserPlaylists.AddAsync(usrPlayList);
    //            await DbContext.SaveChangesAsync();
    //        }
    //        else
    //        {
    //            DbContext.UserPlaylists.Update(usrPlayList);
    //            await DbContext.SaveChangesAsync();
    //        }



    //    }
    //    catch (Exception ex)
    //    {

    //        throw;
    //    }

    //}

    private async Task CreateUserPlaylist(ClientModels.Playlist playlist, ClientModels.PlaylistTrack track)
    {
        try
        {
            var DbContext = await DbFactory.CreateDbContextAsync();

            var resTrack = await GetTrack(track.TrackId);
            var resTracks = new List<Track>() { };
            resTracks.Add(resTrack); 

            var playList = new Chinook.Models.Playlist
                {
                    PlaylistId = GenPlayListId(),
                    Name = playlist.Name,
                    Tracks = resTracks
                };

            var usrPlayList = new Chinook.Models.UserPlaylist
                {
                    Playlist = playList,
                    UserId = CurrentUserId,
                };

            await DbContext.UserPlaylists.AddAsync(usrPlayList);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {

            throw;
        }

    }

    private long GenPlayListId()
    {
        var DbContext = DbFactory.CreateDbContext();
        var id = DbContext.Playlists.Max(x => x.PlaylistId) +1;
        return id;
    }

    private async Task CreateDefaultPlaylist()
    {
        var DbContext = await DbFactory.CreateDbContextAsync();
        var playLists = await DbContext.Playlists.Where(x => x.Name == "My favorite tracks").ToListAsync();
        if (!playLists.Any())
        {
            var playList = new Chinook.Models.Playlist
                {
                    Name = "My favorite tracks",
                };
            await DbContext.Playlists.AddAsync(playList);
            await DbContext.SaveChangesAsync();
        }
    }

    private async Task<Chinook.Models.Playlist> GetDefaultPlaylist()
    {
        var DbContext = await DbFactory.CreateDbContextAsync();
        var playList = await DbContext.Playlists.Include(x => x.Tracks).FirstOrDefaultAsync(t => t.Name == "My favorite tracks");

        return playList;
    }

    private async Task AssignDefaultPlaylist()
    {
        await CreateDefaultPlaylist();
        var DbContext = await DbFactory.CreateDbContextAsync();
        var playListDef = await GetDefaultPlaylist();

        var userPlaylists = DbContext.UserPlaylists.Where(x => x.UserId == CurrentUserId);
        if (!userPlaylists.Any(x => x.Playlist.Name == "My favorite tracks"))
        {
            var playList = new UserPlaylist
                {
                    UserId = await GetUserId(),
                    PlaylistId = playListDef.PlaylistId,
                };
            await DbContext.UserPlaylists.AddAsync(playList);
            await DbContext.SaveChangesAsync();
        }
    }

    private async Task<List<UserPlaylist>> GetUserPlaylists()
    {
        var res = new List<UserPlaylist> { };
        var DbContext = await DbFactory.CreateDbContextAsync();
        res = DbContext.UserPlaylists.Include(x => x.Playlist).Where(x => x.UserId == CurrentUserId)?.ToList();

        return res.ToList();
    }

    private async Task<Track> GetTrack(long id)
    {
        var res = new List<Track> { };
        var DbContext = await DbFactory.CreateDbContextAsync();
        res = DbContext.Tracks.Where(x => x.TrackId == id)?.ToList();

        return res.FirstOrDefault();
    }

    public async Task InitUserPlaylists()
    {
        var playlists = await GetUserPlaylists();
        userPlaylistViewModel.Names.Clear();
        foreach (var item in playlists)
        {            
            userPlaylistViewModel.Names.Add(item.Playlist.Name);
        }
    }

    private async Task AddToFaviroute(bool isFav, long trackId)
    {        
        var DbContext = await DbFactory.CreateDbContextAsync();
        var playListDef = await GetDefaultPlaylist();
        var track = await GetTack(trackId);

        if (isFav)
        {
            if (!await IsExistsFavPlaylistTrack(trackId))
            {
                if (!playListDef.Tracks.Any(x => x.TrackId == trackId))
                {
                    playListDef.Tracks.Add(track);
                    DbContext.Playlists.Update(playListDef);
                    await DbContext.SaveChangesAsync();
                }               
            }
        }else
        {
            if (!await IsExistsFavPlaylistTrack(trackId))
            {
                if (!playListDef.Tracks.Any(x => x.TrackId == trackId))
                {
                    playListDef.Tracks.Remove(track);
                    DbContext.Playlists.Update(playListDef);
                    await DbContext.SaveChangesAsync();
                }
            }
        }

    }

    private async Task<Chinook.Models.Track> GetTack(long trackId)
    {
        var DbContext = await DbFactory.CreateDbContextAsync();
        var track = await DbContext.Tracks.FirstOrDefaultAsync(t => t.TrackId == trackId);

        return track;
    }

    private async Task<bool> IsExistsFavPlaylistTrack(long tackId)
    {
        var DbContext = await DbFactory.CreateDbContextAsync();
        var playListTrack = await DbContext.Playlists.Include(x => x.Tracks).FirstOrDefaultAsync(t => t.Name == "My favorite tracks");
        if (playListTrack.Tracks.Any(x => x.TrackId == tackId))
        {
            return true;
        }

        return false;
    }

  
}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null && Artist != null)
        {
            <div class="form-group mb-2">
                <label>@Artist?.Name - @SelectedTrack?.AlbumTitle - @SelectedTrack?.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select @bind="@selectedPlayListId" class="form-control" id="ExistingPlaylist">
                @foreach (var item in (GetUserPlaylists().Result).Select(x => x.Playlist).ToList())
                {
                    <option value="@item.PlaylistId">@item.Name</option>
                }                
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" @bind="PlayList.Name" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
