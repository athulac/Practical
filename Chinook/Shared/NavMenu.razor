@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3" id="componentPlaceholder">
            <Component @bind-UserPlaylistViewModel="userPlaylistViewModel" />
        </div>        
    </nav>   
</div>


@inject ViewModels.UserPlaylistViewModel userPlaylistViewModel;

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private string CurrentUserId;

    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    private async Task<List<Chinook.Models.UserPlaylist>> GetUserPlaylists()
    {
        var res = new List<Chinook.Models.UserPlaylist> { };
        var DbContext = await DbFactory.CreateDbContextAsync();
        res = DbContext.UserPlaylists.Include(x => x.Playlist).Where(x => x.UserId == CurrentUserId)?.ToList();

        return res.ToList();
    }

        private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    public async Task InitUserPlaylists()
    {
        var playlists = await GetUserPlaylists();
        userPlaylistViewModel.PlayLists.Clear();
        foreach (var item in playlists)
        {            
            userPlaylistViewModel.PlayLists.Add(item.Playlist);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var DbContext = await DbFactory.CreateDbContextAsync();
          CurrentUserId = await GetUserId();
        InitUserPlaylists();
    }



}

